from aiogram.types.chat import ChatType

import messages
from core.olymp import OlympItem
from core.olymps_parser.olymps_parser import OlympsParser
from data.database import users_db as db
from loader import dp, types
from markups import reply, inline
from states import UserParams

users_dict_for_searching_olympiads = {}
num_to_subject = {1: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', 2: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 3: '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏', 6: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 7: '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
                  8: '–ò—Å—Ç–æ—Ä–∏—è', 9: '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', 10: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', 11: '–ë–∏–æ–ª–æ–≥–∏—è', 12: '–§–∏–∑–∏–∫–∞', 13: '–•–∏–º–∏—è',
                  14: '–≠–∫–æ–Ω–æ–º–∏–∫–∞', 15: '–ü—Ä–∞–≤–æ', 16: '–û–ë–ñ', 17: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è', 18: '–ò—Å–∫—É—Å—Å—Ç–≤–æ', 19: '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞',
                  20: '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', 21: '–≠–∫–æ–ª–æ–≥–∏—è', 22: '–ò–ó–û', 23: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ', 24: '–õ–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞',
                  27: '–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞', 28: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', 31: '–ß–µ—Ä—á–µ–Ω–∏–µ'}


@dp.message_handler(ChatType.is_private, commands='start')
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    await db.add_new_user(user_id, user_name)
    await message.answer(messages.welcome_message, reply_markup=reply.default_user_markup)


@dp.message_handler(ChatType.is_private, commands='help')
async def tell_about_functions(message: types.Message):
    await message.answer(messages.about_bot_message, reply_markup=reply.default_user_markup)


@dp.message_handler(ChatType.is_private, text='üîç –ù–∞–π—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥—É')
async def find_an_olympiad(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:')
    await UserParams.SetOlympiad.set()


@dp.message_handler(state=UserParams.SetOlympiad)
async def take_olympiad(message: types.Message, state: UserParams.SetOlympiad):
    user_id = message.from_user.id
    text = message.text
    users_dict_for_searching_olympiads[user_id] = [str(text)]
    await message.answer(f"–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ª–∏–º–ø–∏–∞–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{text}</b>:",
                         reply_markup=inline.numbers_1_10)
    await state.finish()


@dp.callback_query_handler(text_contains='number_')
async def take_number_1_8(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)
    user_id = call.from_user.id
    num = int(call.data.split('_')[-1])
    users_dict_for_searching_olympiads[user_id].append(num)
    parser = OlympsParser(number_of_olymps=num)

    await call.message.answer("–ù–∞—á–∞–ª –ø–æ–∏—Å–∫!")
    olymps = parser.get_olymps_by_request(request=users_dict_for_searching_olympiads[user_id][0])

    if len(olymps) == 0:
        await call.message.answer("–ü–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ..")
    else:
        for olymp in olymps:
            await call.message.answer(get_message_of_olymp(olymp))

    users_dict_for_searching_olympiads.pop(user_id, None)


@dp.message_handler(ChatType.is_private, text='üîç –û–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É')
async def find_subjects_olympiads(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:',
                         reply_markup=inline.olympiads)


@dp.callback_query_handler(text_contains='olymp_')
async def take_subject(call: types.CallbackQuery):
    user_id = call.from_user.id
    await call.message.edit_reply_markup(reply_markup=None)
    unicum_num_subject = call.data.split('_')[1]

    parser = OlympsParser(number_of_olymps=6)

    await call.message.answer("–ù–∞—á–∞–ª –ø–æ–∏—Å–∫!")
    olymps = parser.get_olymps_by_subject(subject_id=unicum_num_subject)
    if len(olymps) == 0:
        await call.message.answer("–ü–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ..")
    else:
        for olymp in olymps:
            await call.message.answer(get_message_of_olymp(olymp))

    users_dict_for_searching_olympiads.pop(user_id, None)


def get_message_of_olymp(olymp: OlympItem) -> str:
    return f'‚Ä¢ <b>–°—Å—ã–ª–∫–∞:</b> <i>{olymp.link}</i>\n' \
           f'‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {olymp.olymp_title}\n' \
           f'‚Ä¢ <b>–û–± –æ–ª–∏–º–ø–∏–∞–¥–µ:</b> {olymp.about_info}\n' \
           f'‚Ä¢ <b>–ö–ª–∞—Å—Å—ã:</b> {olymp.forms_participates}\n' \
           f'‚Ä¢ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {olymp.date_info}\n' \
           f'‚Ä¢ <b>–†–µ–π—Ç–∏–Ω–≥:</b> {olymp.rating}'
